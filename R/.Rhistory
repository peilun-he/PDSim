count <- count + 1
new <- sample(c(0, 1), size = 1, prob = c(0.75, 0.25))
if (new == 1 & old == 1) break
}
count_all[i] <- count
}
head <- 0
old <- -1
new <- -1
n <- 10
count_all <- rep(0, n)
head <- 0
old <- -1
new <- -1
n <- 10
count_all <- rep(0, n)
for (i in 1: n) {
count <- 0
while (TRUE) {
count <- count + 1
new <- sample(c(0, 1), size = 1, prob = c(0.75, 0.25))
if (new == 1 & old == 1) break
old <- new
}
count_all[i] <- count
}
head <- 0
old <- -1
new <- -1
n <- 100000
count_all <- rep(0, n)
for (i in 1: n) {
count <- 0
while (TRUE) {
count <- count + 1
new <- sample(c(0, 1), size = 1, prob = c(0.75, 0.25))
if (new == 1 & old == 1) break
old <- new
}
count_all[i] <- count
}
mean(count_all)
# section 2, question 3
n <- 100000
between23 <- 0
for (i in 1: n) {
a <- runif(n = 3, min = 0, max = 6)
if (min(a) >= 2 & min(a) <= 3) {
between23 <- between23 + 1
}
}
# section 2, question 3
n <- 100000
between23 <- 0
for (i in 1: n) {
a <- runif(n = 3, min = 0, max = 6)
if (min(a) >= 2 & min(a) <= 3) {
between23 <- between23 + 1
}
}
between23/n
1/8
install.packages("rattle")
library(rattle)
data(wine, package = 'rattle')
force(wine)
View(wine)
table(wine$Type)
table(wine$Type) / 178
library(MASS)
wine_lda <- lda(Type ~ ., data = wine)
wine_lda$prior
View(wine_lda)
wine_lda$scaling
wine_lda_pred <- predict(wine_lda)
table(wine_lda_pred$class)
View(wine_lda_pred)
View(wine_lda_pred)
wine_lda$prior
wine_lda$scaling
##### Q2 #####
library(palmerpenguins)
install.packages("palmerpenguins\")
install.packages("palmerpenguins")
install.packages("palmerpenguins")
##### Q2 #####
library(palmerpenguins)
library(tidyverse)
dat <- drop_na(penguins)
library(GGally)
##### Q2 #####
library(palmerpenguins)
library(tidyverse)
library(GGally)
dat <- drop_na(penguins)
ggpairs(dat, columns = c("flipper_length_mm", "body_mass_g",
"bill_length_mm", "bill_depth_mm"))
ggpairs(dat, columns = c("flipper_length_mm", "body_mass_g",
"bill_length_mm", "bill_depth_mm"), aes(col = species))
pca_penguins <- prcomp(dat[,3:6], scale = TRUE, center = TRUE)
pca_penguins
summary(pca_penguins)
##### Q1 #####
# install.packages("rattle")
library(rattle)
##### Q1 #####
# install.packages("rattle")
library(rattle)
data(wine, package = 'rattle')
force(wine)
View(wine)
library(MASS)
library(MASS)
wine_lda <- lda(Type ~ ., data = wine)
wine_lda <- lda(Type ~ ., data = wine)
wine_lda$prior
wine_lda$scaling
wine_lda_pred <- predict(wine_lda)
table(wine_lda_pred$class)
##### Q2 #####
library(palmerpenguins)
library(tidyverse)
library(GGally)
dat <- drop_na(penguins)
View(dat)
ggpairs(dat, columns = c("flipper_length_mm", "body_mass_g",
"bill_length_mm", "bill_depth_mm"))
ggpairs(dat, columns = c("flipper_length_mm", "body_mass_g",
"bill_length_mm", "bill_depth_mm"), aes(col = species))
pca_penguins <- prcomp(dat[,3:6], scale = TRUE, center = TRUE)
View(dat)
pca_penguins
summary(pca_penguins)
screeplot(pca_penguins, type = "l")
##### Q1 #####
# install.packages("rattle")
library(rattle)
data(wine, package = 'rattle')
force(wine)
View(wine)
library(MASS)
wine_lda <- lda(Type ~ ., data = wine)
wine_lda$prior
wine_lda$scaling
wine_lda_pred <- predict(wine_lda)
View(wine_lda_pred)
table(wine_lda_pred$class)
##### Q2 #####
library(palmerpenguins)
library(tidyverse)
library(GGally)
dat <- drop_na(penguins)
ggpairs(dat, columns = c("flipper_length_mm", "body_mass_g",
"bill_length_mm", "bill_depth_mm"))
ggpairs(dat, columns = c("flipper_length_mm", "body_mass_g",
"bill_length_mm", "bill_depth_mm"), aes(col = species))
View(dat)
pca_penguins <- prcomp(dat[,3:6], scale = TRUE, center = TRUE)
pca_penguins
summary(pca_penguins)
screeplot(pca_penguins, type = "l")
library(dplyr)
iris
dat <- iris
dat[dat$Species != "setosa"] = c()
dat[dat$Species != "setosa", ] = c()
iris2 <- iris[iris$Species == "setosa", ]
View(iris2)
T = 1
T
if (T) {a = 1}
T = 0
if (T) {a = 1}
if (T) {b = 1}
T
max(c(1,2,3)-2, 0)
pmax(c(1,2,3)-2, 0)
5: 2
which(c(1, 0, -1, 3) < 0)
setdiff(1:nPath, ind[ind1])
setdiff(c(1,2,3,1), c(2,3))
setdiff(c(1,2,3,1, 5,6), c(2,3))
source("~/Desktop/simulatePath.R")
source("~/Desktop/mcAoption.R")
## Set parameters
# current stock price
S0 <- 60
# strike price
X <- 59
# risk-free rate
r <- 0.06
# dividend yield
d <- 0.04
# time to maturity
T <- 1
# stock volatility
sigma <- 0.2036
# time steps
nStep <- 100
# path
nPath <- 100000
## Simulate
mu <- r - d
# simulate stock price
sPath <- simulatePath(S0, mu, sigma, T, nStep, nPath)
## European option
# call option
value <- pmax(sPath[nStep + 1, ] - X, 0)
EuropeanCall <- mean(value) * exp(-r * T)
remove.packages(PDSim)
remove.packages("PDSim")
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
remove.packages("PDSimTest")
remove.packages("PDSim")
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
remove.packages("PDSim")
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
par <- c(0.5, 0.3, 1, 1.5, 1.3, -0.3, 0.5, 0.3,
seq(from = 0.1, to = 0.01, length.out = n_contract)) # set of parameters
par <- c(0.5, 0.3, 1, 1.5, 1.3, -0.3, 0.5, 0.3,
seq(from = 0.1, to = 0.01, length.out = 12)) # set of parameters
x0 <- c(0, 1/0.3) # initial values of state variables
n_coe <- 0 # number of model coefficient
library(YieldCurve)
dat <- data("FedYieldCurve")
View(FedYieldCurve)
dim(FedYieldCurve)
372-6
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE, ref = "dependency")
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE, ref = "dependency")
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
remotes::package_deps("devtools")
remotes::package_deps("devtools")
install.packages("remotes")
pack <- available.packages()
pack["ggplot2","Depends"]
pack["PDSim","Depends"]
pack["PDSim",]
dim(pack)
package_deps("ggplot2")
library(remotes)
package_deps("ggplot2")
a = package_deps("ggplot2")
View(a)
pkg <- remotes::package_deps("devtools")
View(pkg)
pkg <- remotes::package_deps("PDSim")
View(pkg)
remove.packages("PDSim")
library(ggplot2)
library(MASS)
setwd("/Users/HPL/Documents/GitHub/PDSim/R/")
source("AofT.R")
source("decomposition_eigen.R")
source("EKF.R")
source("G_matrix.R")
source("KF.R")
source("measurement_linear.R")
source("measurement_polynomial.R")
source("simulate_data.R")
source("state_linear.R")
source("taylor_coe.R")
source("UKF.R")
source("polynomial_newton.R")
#######################
##### SS Figure 1 #####
#######################
n_obs <- 360*8 # number of observations
n_contract <- 10 # number of contracts
dt <- 1/360  # interval between two consecutive time points,
seed <- 1234 # seed for random number
par <- c(1.19, 0, 0.03, 0.158, 0.115, 0.189, 0.014, 0.014,
0.027, 0.006, 0, 0.002, 0, 0.005, 0.014, 0.032, 0.043, 0.055) # set of parameters
x0 <- c(0.119, 2.857) # initial values of state variables
n_coe <- 6
par_coe <- c(1, 1, 1, 0, 0, 0)
# state equation
func_f_SS <- function(xt, par) state_linear(xt, par, dt)
# measurement equation
func_g_SS <- function(xt, par, mats) measurement_linear(xt, par, mats)
source("simulate_data2.R")
sim_SS2 <- simulate_data2(par, x0, n_obs, n_contract,
func_f_SS, func_g_SS, 0, "Gaussian", seed)
xt_mean <- sim_SS2$xt
kappa <- par[1]
gamma <- par[2]
mu_xi <- par[3]
sigma_chi <- par[4]
sigma_xi <- par[5]
rho <- par[6]
lambda_chi <- par[7]
lambda_xi <- par[8]
var_chi <- ( 1 - exp(-2*kappa*(1:n_obs)*dt) ) / (2*kappa) * sigma_chi^2
if (gamma == 0) {
var_xi <- (1: n_obs) * dt * sigma_xi^2
cov <- ( 1 - exp(-kappa*(1: n_obs)*dt) ) / (kappa) *(1: n_obs) * sigma_chi * sigma_xi * rho
} else {
var_xi <- ( 1 - exp(-2*gamma*(1:n_obs)*dt) ) / (2*gamma) * sigma_xi^2
cov <- ( 1 - exp(-kappa*(1:n_obs)*dt) ) / ( 1 - exp(-kappa*dt) ) *
( 1 - exp(-gamma*(1:n_obs)*dt) ) / ( 1 - exp(-gamma*dt) ) *
( 1 - exp(-(kappa+gamma)*dt) ) / (kappa+gamma) *
sigma_chi * sigma_xi * rho
}
dat1 <- data.frame(Date = (1: n_obs)/360,
Price = exp(xt_mean[, 1] + xt_mean[, 2]),
Type = "St")
dat2 <- data.frame(Date = (1: n_obs)/360,
Price = exp(xt_mean[, 2]),
Type = "exp_xi")
dat3 <- data.frame(Date = (1: n_obs)/360,
#Price = st_all[, 100],
Price = exp(xt_mean[, 1] + xt_mean[, 2] - qnorm(0.9) * sqrt(var_chi+var_xi)),
Type = "st_CI_10")
dat4 <- data.frame(Date = (1: n_obs)/360,
#Price = st_all[, 900],
Price = exp(xt_mean[, 1] + xt_mean[, 2] + qnorm(0.9) * sqrt(var_chi+var_xi)),
Type = "st_CI_90")
dat5 <- data.frame(Date = (1: n_obs)/360,
#Price = exp_xi_all[, 100],
Price = exp(xt_mean[, 2] - qnorm(0.9) * sqrt(var_xi)),
Type = "exp_xi_CI_10")
dat6 <- data.frame(Date = (1: n_obs)/360,
#Price = exp_xi_all[, 900],
Price = exp(xt_mean[, 2] + qnorm(0.9) * sqrt(var_xi)),
Type = "exp_xi_CI_90")
dat <- rbind(dat1, dat2, dat3, dat4, dat5, dat6)
ggplot(dat, aes(x = Date, y = Price, color = Type, linetype = Type)) +
geom_line() +
labs(title = "Simulated spot price and long-term component (SS model)",
x = "Time in years",
y = "Spot Price") +
scale_color_manual(labels = c("St" = expression(exp(chi[t]+xi[t])),
"st_CI_10" = expression("10th percentile of" ~ exp(chi[t]+xi[t])),
"st_CI_90" = expression("90th percentile of" ~ exp(chi[t]+xi[t])),
"exp_xi" = expression(exp(xi[t])),
"exp_xi_CI_10" = expression("10th percentile of" ~ exp(xi[t])),
"exp_xi_CI_90" = expression("90th percentile of" ~ exp(xi[t]))),
values = c("St" = "black",
"st_CI_10" = "black",
"st_CI_90" = "black",
"exp_xi" = "red",
"exp_xi_CI_10" = "red",
"exp_xi_CI_90" = "red"),
name = "") +
scale_linetype_manual(labels = c("St" = expression(exp(chi[t]+xi[t])),
"st_CI_10" = expression("10th percentile of" ~ exp(chi[t]+xi[t])),
"st_CI_90" = expression("90th percentile of" ~ exp(chi[t]+xi[t])),
"exp_xi" = expression(exp(xi[t])),
"exp_xi_CI_10" = expression("10th percentile of" ~ exp(xi[t])),
"exp_xi_CI_90" = expression("90th percentile of" ~ exp(xi[t]))),
values = c("St" = "solid",
"st_CI_10" = "dashed",
"st_CI_90" = "dashed",
"exp_xi" = "solid",
"exp_xi_CI_10" = "dashed",
"exp_xi_CI_90" = "dashed"),
name = "") +
ylim(10, 36)
# PD model
func_f_PD <- function(xt, par) state_linear(xt, par, dt)
func_g_PD <- function(xt, par, mats) measurement_polynomial(xt, par, mats, 2, n_coe)
sim_PD2 <- simulate_data2(c(par, par_coe), x0, n_obs, n_contract,
func_f_PD, func_g_PD, n_coe, "Gaussian", seed)
chi_mean <- sim_PD2$xt[, 1]
xi_mean <- sim_PD2$xt[, 2]
st <- par_coe[1] + par_coe[2]*chi_mean + par_coe[3]*xi_mean +
par_coe[4]*chi_mean^2 + par_coe[5]*chi_mean*xi_mean + par_coe[6]*xi_mean^2
xi_comp <- par_coe[1] + par_coe[3]*xi_mean + par_coe[6]*xi_mean^2
dat1 <- data.frame(Date = (1: n_obs)/360,
Price = st,
Type = "St")
dat2 <- data.frame(Date = (1: n_obs)/360,
Price = xi_comp,
Type = "xi")
dat3 <- data.frame(Date = (1: n_obs)/360,
#Price = st_all[, 100],
Price = st - qnorm(0.9) * sqrt(var_chi+var_xi),
Type = "st_CI_10")
dat4 <- data.frame(Date = (1: n_obs)/360,
Price = st + qnorm(0.9) * sqrt(var_chi+var_xi),
Type = "st_CI_90")
dat5 <- data.frame(Date = (1: n_obs)/360,
#Price = xi_all[, 100],
Price = xi_comp - qnorm(0.9) * sqrt(var_xi),
Type = "xi_CI_10")
dat6 <- data.frame(Date = (1: n_obs)/360,
#Price = xi_all[, 900],
Price = xi_comp + qnorm(0.9) * sqrt(var_xi),
Type = "xi_CI_90")
dat <- rbind(dat1, dat2, dat3, dat4, dat5, dat6)
ggplot(dat, aes(x = Date, y = Price, color = Type, linetype = Type)) +
geom_line() +
labs(title = "Simulated spot price and long-term component (PD model)",
x = "Time in years",
y = "Spot Price") +
scale_color_manual(labels = c("St" = expression(1+chi[t]+xi[t]+chi[t]^2+chi[t]*xi[t]+xi[t]^2),
"st_CI_10" = expression("10th percentile of" ~ 1+chi[t]+xi[t]+chi[t]^2+chi[t]*xi[t]+xi[t]^2),
"st_CI_90" = expression("90th percentile of" ~ 1+chi[t]+xi[t]+chi[t]^2+chi[t]*xi[t]+xi[t]^2),
"xi" = expression(1+xi[t]+xi[t]^2),
"xi_CI_10" = expression("10th percentile of" ~ 1+xi[t]+xi[t]^2),
"xi_CI_90" = expression("90th percentile of" ~ 1+xi[t]+xi[t]^2)),
values = c("St" = "black",
"st_CI_10" = "black",
"st_CI_90" = "black",
"xi" = "red",
"xi_CI_10" = "red",
"xi_CI_90" = "red"),
name = "") +
scale_linetype_manual(labels = c("St" = expression(1+chi[t]+xi[t]+chi[t]^2+chi[t]*xi[t]+xi[t]^2),
"st_CI_10" = expression("10th percentile of" ~ 1+chi[t]+xi[t]+chi[t]^2+chi[t]*xi[t]+xi[t]^2),
"st_CI_90" = expression("90th percentile of" ~ 1+chi[t]+xi[t]+chi[t]^2+chi[t]*xi[t]+xi[t]^2),
"xi" = expression(1+xi[t]+xi[t]^2),
"xi_CI_10" = expression("10th percentile of" ~ 1+xi[t]+xi[t]^2),
"xi_CI_90" = expression("90th percentile of" ~ 1+xi[t]+xi[t]^2)),
values = c("St" = "solid",
"st_CI_10" = "dashed",
"st_CI_90" = "dashed",
"xi" = "solid",
"xi_CI_10" = "dashed",
"xi_CI_90" = "dashed"),
name = "")
#######################
##### SS Figure 4 #####
#######################
n_obs <- 360*8 # number of observations
n_contract <- 10 # number of contracts
dt <- 1/360  # interval between two consecutive time points,
seed <- 1234 # seed for random number
par <- c(1.19, 0, 0.03, 0.158, 0.115, 0.189, 0.014, 0.014,
0.027, 0.006, 0, 0.002, 0, 0.005, 0.014, 0.032, 0.043, 0.055) # set of parameters
x0 <- c(0.119, 2.857) # initial values of state variables
n_coe <- 6
par_coe <- c(1, 1, 1, 1, 1, 1)
# state equation
func_f_SS <- function(xt, par) state_linear(xt, par, dt)
# measurement equation
func_g_SS <- function(xt, par, mats) measurement_linear(xt, par, mats)
sim_SS <- simulate_data(par, x0, n_obs, n_contract,
func_f_SS, func_g_SS, 0, "Gaussian", seed)
xt_mean <- sim_SS$xt
plot(xt_mean[, 1], type = "l")
plot(xt_mean[, 2], type = "l")
est <- KF(c(par, x0), sim_SS$yt, sim_SS$mats, 0, dt, FALSE, "None")
chi_est <- est$xt_filter[, 1]
xi_est <- est$xt_filter[, 2]
dat1 <- data.frame(Date = (1: n_obs)/360,
Price = exp(chi_est + xi_est),
Type = "St")
dat2 <- data.frame(Date = (1: n_obs)/360,
Price = exp(xi_est),
Type = "exp_xi")
dat <- rbind(dat1, dat2)
ggplot(dat, aes(x = Date, y = Price, color = Type)) +
geom_line() +
labs(title = "Estimated spot and long-term component (SS model)",
x = "Time in years",
y = "Spot Price") +
scale_color_manual(labels = c("St" = expression(exp(chi[t]+xi[t])),
"exp_xi" = expression(exp(xi[t]))),
values = c("St" = "black",
"exp_xi" = "red"),
name = "")
# PD model
par <- c(1.19, 1e-06, 0.03, 0.158, 0.115, 0.189, 0.014, 0.014,
0.027, 0.006, 0, 0.002, 0, 0.005, 0.014, 0.032, 0.043, 0.055) # set of parameters
n_coe <- 6
par_coe <- c(1, 1, 1, 1, 1, 1)
func_f_PD <- function(xt, par) state_linear(xt, par, dt)
func_g_PD <- function(xt, par, mats) measurement_polynomial(xt, par, mats, 2, n_coe)
sim_PD <- simulate_data(c(par, par_coe), x0, n_obs, n_contract,
func_f_PD, func_g_PD, n_coe, "Gaussian", seed)
est_PD <- EKF(c(par, par_coe, x0), sim_PD$yt, sim_PD$mats,
func_f_PD, func_g_PD, dt, n_coe, "Gaussian")
chi_est <- est_PD$xt_filter[, 1]
xi_est <- est_PD$xt_filter[, 2]
dat1 <- data.frame(Date = (1: n_obs)/360,
Price = par_coe[1] + par_coe[2]*chi_est + par_coe[3]*xi_est +
par_coe[4]*chi_est^2 + par_coe[5]*chi_est*xi_est + par_coe[6]*xi_est^2,
Type = "St")
dat2 <- data.frame(Date = (1: n_obs)/360,
Price = par_coe[1] + par_coe[3]*xi_est + par_coe[6]*xi_est^2,
Type = "xi")
dat <- rbind(dat1, dat2)
ggplot(dat, aes(x = Date, y = Price, color = Type)) +
geom_line() +
labs(title = "Estimated spot and long-term component (PD model)",
x = "Time in years",
y = "Spot Price") +
scale_color_manual(labels = c("St" = expression(1+chi[t]+xi[t]+chi[t]^2+chi[t]*xi[t]+xi[t]^2),
"xi" = expression(1+xi[t]+xi[t]^2)),
values = c("St" = "black",
"xi" = "red"),
name = "")
6855*(1+0.055)^20
0.01564425*3253.56
print(Sys.getenv("message1"))
R.version
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages(c("data.table"))
library(PDSim)
remove.packages("PDSim")
