scale_color_manual(values = colors)
source("~/Desktop/FR_R/simulation_study_NS.R")
ggplot(mapping = aes(x = date)) +
geom_line(aes(y = sim, color = "Simulated")) +
geom_line(aes(y = est, color = "Estimated")) +
labs(x = "Dates", y = "Values", color = "") +
scale_color_manual(values = colors)
source("~/Desktop/FR_R/simulation_study_NS.R")
ggplot(mapping = aes(x = date)) +
geom_line(aes(y = sim, color = "Simulated")) +
geom_line(aes(y = est, color = "Estimated")) +
labs(x = "Dates", y = "Values", color = "") +
scale_color_manual(values = colors)
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
ggplot(mapping = aes(x = date)) +
geom_line(aes(y = sim, color = "Simulated")) +
geom_line(aes(y = est, color = "Estimated")) +
labs(x = "Dates", y = "Values", color = "") +
scale_color_manual(values = colors)
source("~/Desktop/FR_R/simulation_study_NS.R")
ggplot(mapping = aes(x = date)) +
geom_line(aes(y = sim, color = "Simulated")) +
geom_line(aes(y = est, color = "Estimated")) +
labs(x = "Dates", y = "Values", color = "") +
scale_color_manual(values = colors)
shiny::runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
ggplot(yt_longer, aes(x = obs, y = value, col = name)) +
geom_line()
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
999+1299+935+838+578+980+990+1300+1749
647+437+383+360+450+1004+740+1282+461+461+1080+1080+512+796+796+399+439+439
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
shiny::runApp('~/Desktop/FR_R')
3/(1-0.8)
runApp('~/Desktop/FR_R')
c(3,2,8)/(1-c(0.8, 0.2, 0.3))
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
diag(c(1,2,3))
diag(diag(1,2,3))
a = matrix(c(1,0,0,0,2,0,0,0,3), nrow = 3)
a
diag(a)
diag(c(1,2,3))
diag(diag(c(1,2,3)))
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
source("~/Desktop/FR_R/simulation_study_NS.R")
runApp('~/Desktop/FR_R')
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
L
source("~/Desktop/FR_R/simulation_study_NS.R")
library(ggplot2)
library(tidyr)
library(pracma)
source("~/Desktop/FR_R/Functions/simulate_data_NS.R")
source("~/Desktop/FR_R/Functions/KF_NS.R")
n_obs <- 1000
n_contract <- 10
lam <- 0.05
par_org <- c(3, 5, 9, 0.8, 0.2, 0.4, 0.1, 0.2, 0.15, seq(from = 0.1, to = 0.01, length.out = n_contract))
dat <- simulate_data_NS(par_org, n_obs, n_contract, lam, 1234)
yt <- data.frame(dat$yt)
yt$obs <- 1: n_obs
yt_longer <- pivot_longer(yt, 1: n_contract)
xt <- data.frame(dat$xt)
xt$obs <- 1: n_obs
xt_longer <- pivot_longer(xt, 1: 3)
mats <- dat$mats
estimation <- KF_NS(par_org, dat$yt, dat$mats, lam)
debugSource("~/Desktop/FR_R/Functions/KF_NS.R")
estimation <- KF_NS(par_org, dat$yt, dat$mats, lam)
L
solve(L)
det(L)
source("~/Desktop/FR_R/simulation_study_NS.R")
debugSource("~/Desktop/FR_R/Functions/KF_NS.R")
n_obs <- 1000
n_contract <- 10
lam <- 0.05
par_org <- c(3, 5, 9, 0.8, 0.2, 0.4, 0.1, 0.2, 0.15, seq(from = 0.1, to = 0.01, length.out = n_contract))
dat <- simulate_data_NS(par_org, n_obs, n_contract, lam, 1234)
yt <- data.frame(dat$yt)
yt$obs <- 1: n_obs
yt_longer <- pivot_longer(yt, 1: n_contract)
xt <- data.frame(dat$xt)
xt$obs <- 1: n_obs
xt_longer <- pivot_longer(xt, 1: 3)
mats <- dat$mats
estimation <- KF_NS(par_org, dat$yt, dat$mats, lam)
L
L <- t(lambda) %*% Pt_prediction %*% lambda + sigma_v # Covariance matrix of et
L
det(L)
i
Pt_filter
det(Pt_filter)
diag(sigma_w)
1 - diag(phi1)^2
diag(sigma_w) / (1 - diag(phi1)^2)
sigma_v
det(sigma_v)
t(lambda) %*% Pt_prediction %*% lambda
det(t(lambda) %*% Pt_prediction %*% lambda)
det(Pt_prediction)
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
source("~/Desktop/FR_R/simulation_study_NS.R")
debugSource("~/Desktop/FR_R/Functions/KF_NS.R")
n_obs <- 1000
n_contract <- 10
lam <- 0.05
par_org <- c(3, 5, 9, 0.8, 0.2, 0.4, 0.1, 0.2, 0.15, seq(from = 0.1, to = 0.01, length.out = n_contract))
dat <- simulate_data_NS(par_org, n_obs, n_contract, lam, 1234)
yt <- data.frame(dat$yt)
yt$obs <- 1: n_obs
yt_longer <- pivot_longer(yt, 1: n_contract)
xt <- data.frame(dat$xt)
xt$obs <- 1: n_obs
xt_longer <- pivot_longer(xt, 1: 3)
mats <- dat$mats
estimation <- KF_NS(par_org, dat$yt, dat$mats, lam)
L
det(L)
lambda
cor(lambda)
cor(t(lambda))
runApp('~/Desktop/FR_R')
source("~/Desktop/FR_R/simulation_study_NS.R")
debugSource("~/Desktop/FR_R/Functions/KF_NS.R")
n_obs <- 1000
n_contract <- 10
lam <- 1
par_org <- c(3, 5, 9, 0.8, 0.2, 0.4, 0.1, 0.2, 0.15, seq(from = 0.1, to = 0.01, length.out = n_contract))
dat <- simulate_data_NS(par_org, n_obs, n_contract, lam, 1234)
yt <- data.frame(dat$yt)
yt$obs <- 1: n_obs
yt_longer <- pivot_longer(yt, 1: n_contract)
xt <- data.frame(dat$xt)
xt$obs <- 1: n_obs
xt_longer <- pivot_longer(xt, 1: 3)
mats <- dat$mats
ggplot(yt_longer, aes(x = obs, y = value, col = name)) +
geom_line()
ggplot(xt_longer, aes(x = obs, y = value, col = name)) +
geom_line()
estimation <- KF_NS(par_org, dat$yt, dat$mats, lam)
L
det(L)
cor(t(lambda))
det(Pt_prediction)
det(t(lambda) %*% lambda)
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
source("~/Desktop/FR_R/simulation_study_NS.R")
runApp('~/Desktop/FR_R')
n_obs <- 1000
n_contract <- 10
lam <- 1
par_org <- c(3, 5, 9, 0.8, 0.2, 0.4, 0.1, 0.2, 0.15, seq(from = 0.1, to = 0.01, length.out = n_contract))
dat <- simulate_data_NS(par_org, n_obs, n_contract, lam, 1234)
yt <- data.frame(dat$yt)
yt$obs <- 1: n_obs
yt_longer <- pivot_longer(yt, 1: n_contract)
xt <- data.frame(dat$xt)
xt$obs <- 1: n_obs
xt_longer <- pivot_longer(xt, 1: 3)
mats <- dat$mats
View(mats)
runApp('~/Desktop/FR_R')
runApp('~/Desktop/FR_R')
source("~/Desktop/FR_R/simulation_study_NS.R")
shiny::runApp('~/Downloads/polynomial-diffusion-model-simulation-and-estimation-upload_data')
runApp('~/Downloads/polynomial-diffusion-model-simulation-and-estimation-upload_data')
runApp('~/Downloads/polynomial-diffusion-model-simulation-and-estimation-upload_data')
runApp('~/Downloads/polynomial-diffusion-model-simulation-and-estimation-upload_data')
runApp('~/Downloads/polynomial-diffusion-model-simulation-and-estimation-upload_data')
runApp('~/Downloads/polynomial-diffusion-model-simulation-and-estimation-upload_data')
(7721.68-7634)/(500/sqrt(57))
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
library(utils)
installpackages("testthat")
install.packages("testthat")
install.packages("testthat")
PDSim::run_app()
remove.packages("PDSim")
PDSim::run_app()
remove.packages("PDSim")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSim_2.1.tar.gz")
PDSim::run_app()
image_path <- system.file("extdata", "Home.jpg", package = "PDSim")
image_path <- system.file("extdata/Home.jpg", package = "PDSim")
image_path <- system.file("Home.jpg", package = "PDSim")
image_path <- system.file("AofT.R", package = "PDSim")
install.packages("magick")
a <- magick::image_read(system.file("extdata/peilun.jpg", "PDSim"))
a <- magick::image_read(system.file("extdata/peilun.jpg", package = "PDSim"))
system.file("extdata/peilun.jpg", package = "PDSim")
build("PDSim")
library(desc)
library(devtools)
install.packages("/Users/HPL/Desktop/PDSim-package/PDSim_2.1.tar.gz")
build("PDSim")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSim_2.1.tar.gz")
PDSim::run_app()
library(devtools)
install.packages("githubinstall")
remove.packages("PDSim")
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim", ref = "package")
PDSim::run_app()
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim", ref = "package")
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim", ref = "package")
PDSim::run_app()
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim", ref = "package")
PDSim::run_app()
library(PDSim)
remove.packages("PDSim")
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim", ref = "package")
PDSim::run_app()
ver
remove.packages("PDSim")
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim", ref = "package")
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim", ref = "package")
PDSim::run_app()
remove.packages("PDSim")
remove.packages("PDSim")
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim")
PDSim::run_app()
View(session)
install.packages("fdapace")
library(fdapace)
View(medfly25)
View("medfly25")
data(medfly25)
View(medfly25)
789*25
# Turn the original data into a list of paired amplitude and timing lists
Flies <- MakeFPCAInputs(medfly25$ID, medfly25$Days, medfly25$nEggs)
View(Flies)
class(Flies)
class(Flies$Ly)
View(Flies$Ly)
fpcaObjFlies <- FPCA(Flies$Ly, Flies$Lt, list(plot = TRUE, methodMuCovEst = 'smooth', userBwCov = 2))
View(fpcaObjFlies)
View(Flies)
View(fpcaObjFlies)
fpcaObjFlies <- FPCA(Flies$Ly, Flies$Lt, list(plot = TRUE, methodMuCovEst = 'smooth', userBwCov = 2, maxK=10))
View(fpcaObjFlies)
fpcaObjFlies <- FPCA(Flies$Ly, Flies$Lt, list(plot = TRUE, methodMuCovEst = 'smooth', userBwCov = 2, maxK=2))
View(fpcaObjFlies)
fpcaObjFlies <- FPCA(Flies$Ly, Flies$Lt, list(plot = TRUE, methodMuCovEst = 'smooth', userBwCov = 2, maxK=20))
View(fpcaObjFlies)
fpcaObjFlies[["phi"]]
# Turn the original data into a list of paired amplitude and timing lists
Flies <- MakeFPCAInputs(IDs = medfly25$ID, tVec = medfly25$Days, yVec = medfly25$nEggs)
fpcaObjFlies <- FPCA(Ly = Flies$Ly, Lt = Flies$Lt, optns = list(plot = TRUE, methodMuCovEst = 'smooth', userBwCov = 2))
View(fpcaObjFlies)
PDSim::run_app()
install.packages("install.packages("visxhclust")")
install.packages("visxhclust")
visxhclust::run_app()
install.packages("ComplexHeatmap")
library(devtools)
install_github("jokergoo/ComplexHeatmap")
visxhclust::run_app()
browseVignettes(package = "visxhclust")
sum(fpcaObjFlies$phi^2)
sum(fpcaObjFlies$phi[,1])
sum(fpcaObjFlies$phi[,2])
sum(fpcaObjFlies$phi[,3])
sum(fpcaObjFlies$phi[,3]^2)
sum(fpcaObjFlies$phi[,1]^2)
sum(fpcaObjFlies$phi[,2]^2)
sum(fpcaObjFlies$phi[,4]^2)
sum(fpcaObjFlies$phi[,4]*fpcaObjFlies$phi[,3])
sum(fpcaObjFlies$phi[,4]*fpcaObjFlies$phi[,2])
sum(fpcaObjFlies$phi[,4]*fpcaObjFlies$phi[,1])
sum(fpcaObjFlies$phi[,3]*fpcaObjFlies$phi[,1])
sum(fpcaObjFlies$phi[,2]*fpcaObjFlies$phi[,1])
library(PDSim)
library(fdapace)
data(medfly25)
# Turn the original data into a list of paired amplitude and timing lists
Flies <- MakeFPCAInputs(IDs = medfly25$ID, tVec = medfly25$Days, yVec = medfly25$nEggs)
fpcaObjFlies <- FPCA(Ly = Flies$Ly, Lt = Flies$Lt, optns = list(plot = TRUE, methodMuCovEst = 'smooth', userBwCov = 2))
browseVignettes("tidyr")
browseVignettes("PDSim")
PDSim::run_app()
browseVignettes("PDSim")
vignette(package="PDSim")
browseVignettes("visxhclust")
library(PDSim)
browseVignettes("PDSim")
# install.packages("devtools") # uncomment if you do not have devtools installed
devtools::install_github("peilun-he/PDSim")
browseVignettes("PDSim")
remove.packages("PDSim")
devtools::install_github("peilun-he/PDSim", ref = "vignettes", build_vignettes = TRUE)
browseVignettes("PDSim")
PDSim::run_app()
PDSim::run_app()
# install.packages("devtools") # uncomment if you do not have devtools installed
remove.packages("PDSim")
devtools::install_github("peilun-he/PDSim", ref = "vignettes", build_vignettes = TRUE)
PDSim::run_app()
PDSim::run_app()
PDSim::run_app()
# install.packages("devtools") # uncomment if you do not have devtools installed
remove.packages("PDSim")
devtools::install_github("peilun-he/PDSim", ref = "vignettes", build_vignettes = TRUE)
browseVignettes("PDSim")
# install.packages("devtools") # uncomment if you do not have devtools installed
remove.packages("PDSim")
devtools::install_github("peilun-he/PDSim", build_vignettes = TRUE)
PDSim::run_app()
browseVignettes("PDSim")
install.packages("dendextend")
install.packages("flexclust")
sqrt(193131)
193131*2
sqrt(386262)
621*622
621*622/2
install.packages("psych")
install.packages("FactoMineR")
install.packages("factoextra")
library(PDSim)
PDSim::run_app()
library(PDSim)
PDSim::run_app()
PDSim::run_app()
PDSim::run_app()
library(ggplot2)
library(ggplot2)
library(dplyr)
library(PDSimTest)
help("PDSimTest::simulate_data")
##### Update package #####
library(roxygen2)
library(devtools)
setwd("/Users/HPL/Desktop/PDSim-package/PDSimTest/")
desc_set_version("2.1.2")
library(desc)
desc_set_version("2.1.2")
roxygenise()
check()
build()
remove.packages("PDSimTest")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSimTest_2.1.2.tar.gz")
help("PDSimTest::simulate_data")
install.packages("pkgdown")
library(pkgdown)
build_site("PDSimTest")
build_site("dplyr")
setwd("/Users/HPL/Desktop/PDSim-package/PDSimTest/")
desc_set_version("2.1.2")
roxygenise()
check()
build()
remove.packages("PDSimTest")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSimTest_2.1.2.tar.gz")
help("PDSimTest::simulate_data")
setwd("/Users/HPL/Desktop/PDSim-package/PDSimTest/")
desc_set_version("2.1.2")
roxygenise()
check()
build()
remove.packages("PDSimTest")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSimTest_2.1.2.tar.gz")
help("PDSimTest::simulate_data")
help("PDSimTest::simulate_data")
setwd("/Users/HPL/Desktop/PDSim-package/PDSimTest/")
desc_set_version("2.1.2")
roxygenise()
check()
build()
remove.packages("PDSimTest")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSimTest_2.1.2.tar.gz")
help("PDSimTest::simulate_data")
setwd("/Users/HPL/Desktop/PDSim-package/PDSimTest/")
desc_set_version("2.1.2")
roxygenise()
check()
build()
remove.packages("PDSimTest")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSimTest_2.1.2.tar.gz")
help("PDSimTest::simulate_data")
setwd("/Users/HPL/Desktop/PDSim-package/PDSimTest/")
desc_set_version("2.1.2")
roxygenise()
check()
build()
remove.packages("PDSimTest")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSimTest_2.1.2.tar.gz")
help("PDSimTest::simulate_data")
help("PDSimTest::simulate_data")
setwd("/Users/HPL/Desktop/PDSim-package/PDSimTest/")
desc_set_version("2.1.2")
roxygenise()
check()
build()
remove.packages("PDSimTest")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSimTest_2.1.2.tar.gz")
help("PDSimTest::simulate_data")
setwd("/Users/HPL/Desktop/PDSim-package/PDSimTest/")
desc_set_version("2.1.2")
roxygenise()
check()
build()
remove.packages("PDSimTest")
install.packages("/Users/HPL/Desktop/PDSim-package/PDSimTest_2.1.2.tar.gz")
help("PDSimTest::simulate_data")
setwd("/Users/HPL/Documents/GitHub/PDSim/R/")
document("generate_data.R")
document("/Users/HPL/Documents/GitHub/PDSim/R/generate_data.R")
library(devtools)
simulate_data <- function(par, x0, n_obs, n_contract, func_f, func_g, n_coe, noise, seed) {
# Parameters
kappa_chi  <- par[1]
kappa_xi   <- par[2]
mu_xi      <- par[3]
sigma_chi  <- par[4]
sigma_xi   <- par[5]
rho        <- par[6]
lambda_chi <- par[7]
lambda_xi  <- par[8]
monthdays <- 30 # number of days per month
yeardays <- 360 # number of days per year
dt <- 1 / yeardays # delta_t
n_state <- length(x0) # number of state variables
n_para <- length(par) # number of parameters
# Generate random noises for xt and yt
set.seed(seed) # fix random seed
if (noise == "Gaussian") {
if (length(par) - 8 - n_coe != n_contract) {
stop("Incorrect number of contracts or parameters. ")
}
if (n_contract == 1) {
V <- par[9]^2
} else {
V <- diag( par[9: (n_para-n_coe)] ^ 2 )
}
W = matrix(c(sigma_chi^2/(2*kappa_chi) * ( 1-exp(-2*kappa_chi*dt) ),
rho*sigma_chi*sigma_xi/(kappa_chi+kappa_xi) * ( 1-exp(-(kappa_chi+kappa_xi)*dt) ),
rho*sigma_chi*sigma_xi/(kappa_chi+kappa_xi) * ( 1-exp(-(kappa_chi+kappa_xi)*dt) ),
sigma_xi^2/(2*kappa_xi) * ( 1-exp(-2*kappa_xi*dt) )),
nrow = 2, byrow = TRUE)
noise_xt = mvrnorm(n_obs, c(0, 0), W)
noise_yt = mvrnorm(n_obs, rep(0, n_contract), V)
} else {
stop("Incorrect distribution of noises. ")
}
# Simulate xt
xt <- matrix(0, nrow = n_obs+1, ncol = n_state)
xt[1, ] <- x0
for (j in 2: (n_obs+1)) {
x_temp <- func_f(xt[j-1, ], par)
xt[j, ] <- x_temp$y + noise_xt[j-1, ]
}
xt <- xt[-1, ]
# Simulate time to maturities
TT <- seq(from = monthdays, to = n_contract*monthdays, by = monthdays)
TT <- TT + 1
mats <- matrix(0, nrow = n_obs, ncol = n_contract)
for (j in 1: n_obs) {
if ((j-1) %% monthdays == 0 & j != 1) {
TT <- TT + monthdays
}
mats[j, ] <- (TT - j) / yeardays
}
# Simulate yt
y_temp <- func_g(t(xt), par, mats)
yt <- y_temp$y + noise_yt
return(list(yt = yt, mats = mats, xt = xt))
}
help(simulate_data)
document("/Users/HPL/Documents/GitHub/PDSim/")
?generate_data
??generate_data
??simulate_data
?simulate_data
