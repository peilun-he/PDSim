% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EKF.R
\name{EKF}
\alias{EKF}
\title{Extended Kalman Filter}
\usage{
EKF(par, yt, mats, func_f, func_g, dt, n_coe, noise)
}
\arguments{
\item{par}{A vector of parameters.}

\item{yt}{Futures price.}

\item{mats}{Time to maturity.}

\item{func_f}{Function \code{f}, which should take two arguments, xt and a vector of parameters,
and return two values, the function value f(x) and the gredient f'(x).}

\item{func_g}{Function \code{g}, which should take three arguments, xt, a vector of parameters
and maturities, and return two values, g(x) and g'(x).}

\item{dt}{\eqn{\Delta t}. The interval between two consecutive time points.}

\item{n_coe}{The number of model coefficient to be estimated.}

\item{noise}{The distribution of noise, \verb{currently only "Gaussian" works.}Gaussian\code{or}Gamma`.}
}
\value{
This function returns a list with components:
\item{nll}{Negative log-likelihood. }
\item{ll_table}{A vector to store cumulative log-likelihood at each time point.
Used to calculate Sandwich variance. }
\item{table_xt_filter}{Filtered state variable. }
\item{table_xt_prediction}{Predicted state variable. }
}
\description{
The Extended Kalman Filter (EKF) is a widely used recursive algorithm for estimating
the hidden state variables of a non-linear dynamic system.
}
\details{
Details, Ref: Eric Wan & Rudolph van der Merwe (2000). Non-linear state-space model:
X_t = f(X_{t-1}) + epsilon_t, epsilon_t ~ N(0, W)
Y_t = g(X_t) + eta_t, eta_t ~ N(0, V)
}
\examples{
######################################
##### Polynomial diffusion model #####
######################################
n_obs <- 100
n_contract <- 10
par <- c(0.5, 0.3, 1, 1.5, 1.3, -0.3, 0.5, 0.3, seq(from = 0.1, to = 0.01, length.out = n_contract))
x0 <- c(0, 1/0.3)
dt <- 1/360 # daily data
n_coe <- 6 # polynomial with order 2`
par_coe <- c(1, 1, 1, 1, 1, 1)
func_f <- function(xt, par) state_linear(xt, par, dt) # state equation
func_g <- function(xt, par, mats) measurement_polynomial(xt, par, mats, 2, n_coe) # measurement equation 
dat <- simulate_data(c(par, par_coe), x0, n_obs, n_contract, func_f, func_g, n_coe, "Gaussian", 1234)
price <- dat$yt # measurement_polynomial function returns the futures price
mats <- dat$mats
est <- EKF(c(par, par_coe, x0), price, mats, func_f, func_g, dt, n_coe, "Gaussian")
}
\seealso{
\link{KF}, \link{UKF} for other filtering methods.
}
